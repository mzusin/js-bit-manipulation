/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var n=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},o=r=>parseInt(r,2),s=r=>r>>>0;var b=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},m=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},i=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},p=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},c=r=>~r+1,x=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r};var a=r=>r&1,B=r=>r>>1,w=r=>r|1,I=r=>r&-2;var S=r=>r<0?1:0,l=r=>r|2147483648,y=r=>r&2147483647;var d=(r,e)=>{let t=1<<e;return r|t},k=(r,e)=>{let t=~(1<<e);return r&t},E=(r,e)=>{let t=1<<e;return r^t},h=r=>~r,F=(r,e)=>{let t=1<<e;return(r&t)!==0};var v=r=>(r&1)===0,P=r=>(r&1)===1,A=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};export{x as addition,s as convertToUInt32,i as divideBy2,p as divideBy2PowerN,n as getBinaryString,a as getLSB,S as getMSB,h as invertBits,F as isBitSetAtPosition,A as isEquals,v as isEven,P as isOdd,b as multiplyBy2,m as multiplyBy2PowerN,o as parseBinaryString,B as removeLSB,d as setBitAtPosition,w as setLSB,l as setMSB,E as toggleBitAtPosition,c as toggleSign,k as unsetBitAtPosition,I as unsetLSB,y as unsetMSB};
