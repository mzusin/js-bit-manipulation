/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},s=r=>parseInt(r,2),u=r=>r>>>0;var i=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},m=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},p=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},c=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},x=r=>~r+1,n=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},g=(r,e)=>(e=~e+1,n(r,e));var B=r=>r&1,w=r=>r>>1,I=r=>r|1,f=r=>r&-2;var l=r=>r<0?1:0,y=r=>r|2147483648,N=r=>r&2147483647;var k=(r,e)=>{let t=1<<e;return r|t},E=(r,e)=>{let t=~(1<<e);return r&t},h=(r,e)=>{let t=1<<e;return r^t},F=r=>~r,M=(r,e)=>{let t=1<<e;return(r&t)!==0};var P=r=>(r&1)===0,A=r=>(r&1)===1,L=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};export{n as addition,u as convertToUInt32,p as divideBy2,c as divideBy2PowerN,o as getBinaryString,B as getLSB,l as getMSB,F as invertBits,M as isBitSetAtPosition,L as isEquals,P as isEven,A as isOdd,i as multiplyBy2,m as multiplyBy2PowerN,s as parseBinaryString,w as removeLSB,k as setBitAtPosition,I as setLSB,y as setMSB,g as subtraction,h as toggleBitAtPosition,x as toggleSign,E as unsetBitAtPosition,f as unsetLSB,N as unsetMSB};
