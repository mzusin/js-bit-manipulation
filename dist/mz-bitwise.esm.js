/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},s=r=>parseInt(r,2),u=r=>r>>>0,b=(r,e)=>(r^=e,e^=r,r^=e,[r,e]);var m=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},p=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},c=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},x=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},a=r=>~r+1,n=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},g=(r,e)=>(e=~e+1,n(r,e)),B=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=n(t,r)),e>>=1,r<<=1;return t};var l=r=>r&1,I=r=>r>>1,f=r=>r|1,S=r=>r&-2;var N=r=>r<0?1:0,d=r=>r|2147483648,h=r=>r&2147483647;var E=(r,e)=>{let t=1<<e;return r|t},F=(r,e)=>{let t=~(1<<e);return r&t},M=(r,e)=>{let t=1<<e;return r^t},v=r=>~r,P=(r,e)=>{let t=1<<e;return(r&t)!==0};var L=r=>(r&1)===0,q=r=>(r&1)===1,O=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};export{n as addition,u as convertToUInt32,c as divideBy2,x as divideBy2PowerN,o as getBinaryString,l as getLSB,N as getMSB,v as invertBits,P as isBitSetAtPosition,O as isEquals,L as isEven,q as isOdd,B as multiplication,m as multiplyBy2,p as multiplyBy2PowerN,s as parseBinaryString,I as removeLSB,E as setBitAtPosition,f as setLSB,d as setMSB,g as subtraction,b as swap,M as toggleBitAtPosition,a as toggleSign,F as unsetBitAtPosition,S as unsetLSB,h as unsetMSB};
