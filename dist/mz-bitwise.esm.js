/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var s=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},u=r=>parseInt(r,2),b=r=>r>>>0,i=(r,e)=>(r^=e,e^=r,r^=e,[r,e]),p=(r,e)=>(r|e)-(r&e);var c=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},m=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},a=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},g=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},F=r=>~r+1,o=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},B=(r,e)=>(e=~e+1,o(r,e)),S=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=o(t,r)),e>>=1,r<<=1;return t};var w=r=>r&1,f=r=>r>>1,I=r=>r|1,M=r=>r&-2,h=r=>r^1;var N=r=>r<0?1:0,d=r=>r|2147483648,k=r=>r&2147483647;var A=(r,e)=>{let t=1<<e;return r|t},L=(r,e)=>{let t=~(1<<e);return r&t},v=(r,e)=>{let t=1<<e;return r^t},P=r=>~r,_=(r,e)=>{let t=1<<e;return(r&t)!==0},K=r=>{let e=0;for(;r>0;)e+=r&1,r>>=1;return e},T=r=>{if(r===0)return 1;let e=0;for(;r>0;)r&1||e++,r>>=1;return e};var U=r=>(r&1)===0,q=r=>(r&1)===1,H=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0},O=r=>(r&2147483648)!==0,R=r=>(r&2147483648)===0;var z=1,D=2147483648,G=4294967295,J=4294967294,Q=2147483647,V=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var X=r=>{let e={10:"a",11:"b",12:"c",13:"d",14:"e",15:"f"};r=r>>>0;let t="";for(;r>0;){let n=r&15;t=(n<10?n.toString():e[n])+t,r>>>=4}return t||"0"};export{G as ALL_BITS_SET_MASK,J as CLSB_MASK,Q as CMSB_MASK,z as LSB_MASK,D as MSB_MASK,o as addition,X as binaryToHex,b as convertToUInt32,K as countSetBits,T as countUnsetBits,a as divideBy2,g as divideBy2PowerN,s as getBinaryString,w as getLSB,N as getMSB,V as getNSetBitsMask,P as invertBits,_ as isBitSetAtPosition,H as isEquals,U as isEven,O as isNegative,q as isOdd,R as isPositive,S as multiplication,c as multiplyBy2,m as multiplyBy2PowerN,u as parseBinaryString,f as removeLSB,A as setBitAtPosition,I as setLSB,d as setMSB,B as subtraction,i as swap,v as toggleBitAtPosition,h as toggleLSB,F as toggleSign,L as unsetBitAtPosition,M as unsetLSB,k as unsetMSB,p as xor};
