/* 
Bit Manipulation in JavaScript v1.0.1
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var s=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},u=r=>parseInt(r,2),i=r=>r>>>0,b=(r,t)=>(r^=t,t^=r,r^=t,[r,t]),p=(r,t)=>(r|t)-(r&t);var c=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},m=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<t},g=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},a=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>t},B=r=>~r+1,o=(r,t)=>{for(;t!==0;){let e=r&t;r=r^t,t=e<<1}return r},F=(r,t)=>(t=~t+1,o(r,t)),S=(r,t)=>{let e=0;for(;t!==0;)(t&1)===1&&(e=o(e,r)),t>>=1,r<<=1;return e};var w=r=>r&1,f=r=>r>>1,I=r=>r|1,h=r=>r&-2,M=r=>r^1;var N=r=>r<0?1:0,d=r=>r|2147483648,E=r=>r&2147483647;var y=(r,t)=>{let e=1<<t;return r|e},L=(r,t)=>{let e=~(1<<t);return r&e},v=(r,t)=>{let e=1<<t;return r^e},P=r=>~r,_=(r,t)=>{let e=1<<t;return(r&e)!==0},K=r=>r-1,T=r=>r&~(r-1);var C=r=>(r&1)===0,U=r=>(r&1)===1,q=(r,t)=>{if(!Number.isInteger(r)||!Number.isInteger(t))throw new Error("Input must be an integer.");return(r^t)===0},H=r=>(r&2147483648)!==0,O=r=>(r&2147483648)===0;var z=1,D=2147483648,G=4294967295,J=4294967294,Q=2147483647,V=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var X=r=>{let t={10:"a",11:"b",12:"c",13:"d",14:"e",15:"f"};r=r>>>0;let e="";for(;r>0;){let n=r&15;e=(n<10?n.toString():t[n])+e,r>>>=4}return e||"0"};var Z=r=>{if(r===0)return 1;let t=0;for(;r>0;)r&1||t++,r>>=1;return t},$=r=>{let t=0;for(;r>0;)t+=r&1,r>>=1;return t};export{G as ALL_BITS_SET_MASK,J as CLSB_MASK,Q as CMSB_MASK,z as LSB_MASK,D as MSB_MASK,o as addition,X as binaryToHex,i as convertToUInt32,$ as countSetBits,Z as countUnsetBits,g as divideBy2,a as divideBy2PowerN,s as getBinaryString,w as getLSB,N as getMSB,V as getNSetBitsMask,T as getRightmostSetBit,P as invertBits,_ as isBitSetAtPosition,q as isEquals,C as isEven,H as isNegative,U as isOdd,O as isPositive,S as multiplication,c as multiplyBy2,m as multiplyBy2PowerN,u as parseBinaryString,f as removeLSB,y as setBitAtPosition,I as setLSB,d as setMSB,F as subtraction,b as swap,v as toggleBitAtPosition,M as toggleLSB,B as toggleSign,L as unsetBitAtPosition,h as unsetLSB,E as unsetMSB,K as unsetRightmostSetBitAndSetAllNextBits,p as xor};
