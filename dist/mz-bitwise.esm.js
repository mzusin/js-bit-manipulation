/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},s=r=>parseInt(r,2),u=r=>r>>>0,b=(r,e)=>(r^=e,e^=r,r^=e,[r,e]),i=(r,e)=>(r|e)-(r&e);var x=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},c=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},m=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},g=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},F=r=>~r+1,n=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},a=(r,e)=>(e=~e+1,n(r,e)),B=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=n(t,r)),e>>=1,r<<=1;return t};var w=r=>r&1,l=r=>r>>1,f=r=>r|1,I=r=>r&-2,M=r=>r^1;var E=r=>r<0?1:0,N=r=>r|2147483648,A=r=>r&2147483647;var y=(r,e)=>{let t=1<<e;return r|t},L=(r,e)=>{let t=~(1<<e);return r&t},d=(r,e)=>{let t=1<<e;return r^t},v=r=>~r,P=(r,e)=>{let t=1<<e;return(r&t)!==0},_=r=>{let e=0;for(;r>0;)e+=r&1,r>>=1;return e},K=r=>{if(r===0)return 1;let e=0;for(;r>0;)r&1||e++,r>>=1;return e};var C=r=>(r&1)===0,U=r=>(r&1)===1,q=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0},O=r=>(r&2147483648)!==0,j=r=>(r&2147483648)===0;var D=1,G=2147483648,H=4294967295,J=4294967294,Q=2147483647,R=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};export{H as ALL_BITS_SET_MASK,J as CLSB_MASK,Q as CMSB_MASK,D as LSB_MASK,G as MSB_MASK,n as addition,u as convertToUInt32,_ as countSetBits,K as countUnsetBits,m as divideBy2,g as divideBy2PowerN,o as getBinaryString,w as getLSB,E as getMSB,R as getNSetBitsMask,v as invertBits,P as isBitSetAtPosition,q as isEquals,C as isEven,O as isNegative,U as isOdd,j as isPositive,B as multiplication,x as multiplyBy2,c as multiplyBy2PowerN,s as parseBinaryString,l as removeLSB,y as setBitAtPosition,f as setLSB,N as setMSB,a as subtraction,b as swap,d as toggleBitAtPosition,M as toggleLSB,F as toggleSign,L as unsetBitAtPosition,I as unsetLSB,A as unsetMSB,i as xor};
