/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var m=Object.defineProperty;var u=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var s=(e,r,t)=>r in e?m(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,n=(e,r)=>{for(var t in r||(r={}))p.call(r,t)&&s(e,t,r[t]);if(u)for(var t of u(r))w.call(r,t)&&s(e,t,r[t]);return e};var b=(e,r)=>{for(var t in r)m(e,t,{get:r[t],enumerable:!0})};var o={};b(o,{divideBy2:()=>x,equals:()=>g,isEven:()=>a,isOdd:()=>c,multiplyBy2:()=>f});var a=e=>(e&1)===0,c=e=>(e&1)===1,x=e=>{if(!Number.isInteger(e))throw new Error("Input must be an integer.");return e>>1},f=e=>{if(!Number.isInteger(e))throw new Error("Input must be an integer.");return e<<1},g=(e,r)=>{if(!Number.isInteger(e)||!Number.isInteger(r))throw new Error("Input must be an integer.");return(e^r)===0};var i={};b(i,{getLSB:()=>l,removeLSB:()=>B,setLSB:()=>d,unsetLSB:()=>I});var l=e=>e&1,B=e=>e>>1,d=e=>e|1,I=e=>e&-2;var y=n(n({},o),i);window.mzBitwise=window.mzBitwise||y;})();
