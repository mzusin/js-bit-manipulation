/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var F=Object.defineProperty;var w=Object.getOwnPropertySymbols;var f=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable;var B=(r,t,e)=>t in r?F(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e,o=(r,t)=>{for(var e in t||(t={}))f.call(t,e)&&B(r,e,t[e]);if(w)for(var e of w(t))S.call(t,e)&&B(r,e,t[e]);return r};var n=(r,t)=>{for(var e in t)F(r,e,{get:t[e],enumerable:!0})};var i={};n(i,{convertToUInt32:()=>d,getBinaryString:()=>l,parseBinaryString:()=>I,swap:()=>M,xor:()=>h});var l=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},I=r=>parseInt(r,2),d=r=>r>>>0,M=(r,t)=>(r^=t,t^=r,r^=t,[r,t]),h=(r,t)=>(r|t)-(r&t);var b={};n(b,{addition:()=>u,divideBy2:()=>E,divideBy2PowerN:()=>N,multiplication:()=>v,multiplyBy2:()=>y,multiplyBy2PowerN:()=>k,subtraction:()=>L,toggleSign:()=>A});var y=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},k=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<t},E=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},N=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>t},A=r=>~r+1,u=(r,t)=>{for(;t!==0;){let e=r&t;r=r^t,t=e<<1}return r},L=(r,t)=>(t=~t+1,u(r,t)),v=(r,t)=>{let e=0;for(;t!==0;)(t&1)===1&&(e=u(e,r)),t>>=1,r<<=1;return e};var m={};n(m,{getLSB:()=>P,removeLSB:()=>_,setLSB:()=>K,toggleLSB:()=>z,unsetLSB:()=>T});var P=r=>r&1,_=r=>r>>1,K=r=>r|1,T=r=>r&-2,z=r=>r^1;var p={};n(p,{getMSB:()=>C,setMSB:()=>U,unsetMSB:()=>q});var C=r=>r<0?1:0,U=r=>r|2147483648,q=r=>r&2147483647;var c={};n(c,{countSetBits:()=>D,countUnsetBits:()=>G,invertBits:()=>W,isBitSetAtPosition:()=>j,setBitAtPosition:()=>H,toggleBitAtPosition:()=>R,unsetBitAtPosition:()=>O});var H=(r,t)=>{let e=1<<t;return r|e},O=(r,t)=>{let e=~(1<<t);return r&e},R=(r,t)=>{let e=1<<t;return r^e},W=r=>~r,j=(r,t)=>{let e=1<<t;return(r&e)!==0},D=r=>{let t=0;for(;r>0;)t+=r&1,r>>=1;return t},G=r=>{if(r===0)return 1;let t=0;for(;r>0;)r&1||t++,r>>=1;return t};var x={};n(x,{isEquals:()=>V,isEven:()=>J,isNegative:()=>X,isOdd:()=>Q,isPositive:()=>Y});var J=r=>(r&1)===0,Q=r=>(r&1)===1,V=(r,t)=>{if(!Number.isInteger(r)||!Number.isInteger(t))throw new Error("Input must be an integer.");return(r^t)===0},X=r=>(r&2147483648)!==0,Y=r=>(r&2147483648)===0;var a={};n(a,{ALL_BITS_SET_MASK:()=>rr,CLSB_MASK:()=>tr,CMSB_MASK:()=>er,LSB_MASK:()=>Z,MSB_MASK:()=>$,getNSetBitsMask:()=>or});var Z=1,$=2147483648,rr=4294967295,tr=4294967294,er=2147483647,or=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var g={};n(g,{binaryToHex:()=>nr});var nr=r=>{let t={10:"a",11:"b",12:"c",13:"d",14:"e",15:"f"};r=r>>>0;let e="";for(;r>0;){let s=r&15;e=(s<10?s.toString():t[s])+e,r>>>=4}return e||"0"};var sr=o(o(o(o(o(o(o(o({},i),b),m),p),c),x),a),g);window.mzBitwise=window.mzBitwise||sr;})();
