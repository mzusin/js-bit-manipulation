/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var s=Object.defineProperty;var i=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable;var o=(e,r,t)=>r in e?s(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,m=(e,r)=>{for(var t in r||(r={}))u.call(r,t)&&o(e,t,r[t]);if(i)for(var t of i(r))b.call(r,t)&&o(e,t,r[t]);return e};var w=(e,r)=>{for(var t in r)s(e,t,{get:r[t],enumerable:!0})};var n={};w(n,{divideBy2:()=>d,isEven:()=>p,isOdd:()=>a,multiplyBy2:()=>c});var p=e=>(e&1)===0,a=e=>(e&1)===1,d=e=>{if(!Number.isInteger(e))throw new Error("Input must be an integer.");return e>>1},c=e=>{if(!Number.isInteger(e))throw new Error("Input must be an integer.");return e<<1};var l=m({},n);window.mzBitwise=window.mzBitwise||l;})();
