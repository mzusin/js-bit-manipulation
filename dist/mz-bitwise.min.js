/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var p=Object.defineProperty;var i=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var b=(r,e,t)=>e in r?p(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))a.call(e,t)&&b(r,t,e[t]);if(i)for(var t of i(e))c.call(e,t)&&b(r,t,e[t]);return r};var o=(r,e)=>{for(var t in e)p(r,t,{get:e[t],enumerable:!0})};var s={};o(s,{convertToUInt32:()=>l,divideBy2:()=>B,equals:()=>I,getBinaryString:()=>x,isEven:()=>w,isOdd:()=>g,multiplyBy2:()=>f});var x=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},w=r=>(r&1)===0,g=r=>(r&1)===1,B=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},I=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0},l=r=>r>>>0;var u={};o(u,{getLSB:()=>S,removeLSB:()=>d,setLSB:()=>F,unsetLSB:()=>M});var S=r=>r&1,d=r=>r>>1,F=r=>r|1,M=r=>r&-2;var m={};o(m,{getMSB:()=>y,setMSB:()=>E,unsetMSB:()=>N});var y=r=>r<0?1:0,E=r=>r|2147483648,N=r=>r&2147483647;var h=n(n(n({},s),u),m);window.mzBitwise=window.mzBitwise||h;})();
