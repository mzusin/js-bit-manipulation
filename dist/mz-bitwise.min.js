/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var a=Object.defineProperty;var b=Object.getOwnPropertySymbols;var c=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var p=(r,e,t)=>e in r?a(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))c.call(e,t)&&p(r,t,e[t]);if(b)for(var t of b(e))x.call(e,t)&&p(r,t,e[t]);return r};var o=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})};var s={};o(s,{convertToUInt32:()=>B,divideBy2:()=>w,getBinaryString:()=>g,multiplyBy2:()=>f,toggleSign:()=>l});var g=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},w=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},B=r=>r>>>0,l=r=>~r+1;var u={};o(u,{getLSB:()=>I,removeLSB:()=>S,setLSB:()=>d,unsetLSB:()=>F});var I=r=>r&1,S=r=>r>>1,d=r=>r|1,F=r=>r&-2;var m={};o(m,{getMSB:()=>M,setMSB:()=>E,unsetMSB:()=>y});var M=r=>r<0?1:0,E=r=>r|2147483648,y=r=>r&2147483647;var i={};o(i,{isEquals:()=>k,isEven:()=>N,isOdd:()=>h});var N=r=>(r&1)===0,h=r=>(r&1)===1,k=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};var v=n(n(n(n({},s),u),m),i);window.mzBitwise=window.mzBitwise||v;})();
