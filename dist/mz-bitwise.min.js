/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var g=Object.defineProperty;var a=Object.getOwnPropertySymbols;var w=Object.prototype.hasOwnProperty,F=Object.prototype.propertyIsEnumerable;var B=(r,t,e)=>t in r?g(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e,n=(r,t)=>{for(var e in t||(t={}))w.call(t,e)&&B(r,e,t[e]);if(a)for(var e of a(t))F.call(t,e)&&B(r,e,t[e]);return r};var o=(r,t)=>{for(var e in t)g(r,e,{get:t[e],enumerable:!0})};var s={};o(s,{convertToUInt32:()=>l,getBinaryString:()=>f,parseBinaryString:()=>S,swap:()=>I,xor:()=>M});var f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},S=r=>parseInt(r,2),l=r=>r>>>0,I=(r,t)=>(r^=t,t^=r,r^=t,[r,t]),M=(r,t)=>(r|t)-(r&t);var u={};o(u,{addition:()=>i,divideBy2:()=>E,divideBy2PowerN:()=>k,multiplication:()=>N,multiplyBy2:()=>d,multiplyBy2PowerN:()=>h,subtraction:()=>A,toggleSign:()=>y});var d=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},h=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<t},E=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},k=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>t},y=r=>~r+1,i=(r,t)=>{for(;t!==0;){let e=r&t;r=r^t,t=e<<1}return r},A=(r,t)=>(t=~t+1,i(r,t)),N=(r,t)=>{let e=0;for(;t!==0;)(t&1)===1&&(e=i(e,r)),t>>=1,r<<=1;return e};var b={};o(b,{getLSB:()=>L,removeLSB:()=>_,setLSB:()=>v,toggleLSB:()=>K,unsetLSB:()=>P});var L=r=>r&1,_=r=>r>>1,v=r=>r|1,P=r=>r&-2,K=r=>r^1;var m={};o(m,{getMSB:()=>z,setMSB:()=>T,unsetMSB:()=>C});var z=r=>r<0?1:0,T=r=>r|2147483648,C=r=>r&2147483647;var p={};o(p,{countSetBits:()=>D,countUnsetBits:()=>G,invertBits:()=>W,isBitSetAtPosition:()=>j,setBitAtPosition:()=>U,toggleBitAtPosition:()=>O,unsetBitAtPosition:()=>q});var U=(r,t)=>{let e=1<<t;return r|e},q=(r,t)=>{let e=~(1<<t);return r&e},O=(r,t)=>{let e=1<<t;return r^e},W=r=>~r,j=(r,t)=>{let e=1<<t;return(r&e)!==0},D=r=>{let t=0;for(;r>0;)t+=r&1,r>>=1;return t},G=r=>{if(r===0)return 1;let t=0;for(;r>0;)r&1||t++,r>>=1;return t};var c={};o(c,{isEquals:()=>Q,isEven:()=>H,isOdd:()=>J});var H=r=>(r&1)===0,J=r=>(r&1)===1,Q=(r,t)=>{if(!Number.isInteger(r)||!Number.isInteger(t))throw new Error("Input must be an integer.");return(r^t)===0};var x={};o(x,{ALL_BITS_SET_MASK:()=>X,CLSB_MASK:()=>Y,CMSB_MASK:()=>Z,LSB_MASK:()=>R,MSB_MASK:()=>V,getNSetBitsMask:()=>$});var R=1,V=2147483648,X=4294967295,Y=4294967294,Z=2147483647,$=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var rr=n(n(n(n(n(n(n({},s),u),b),m),p),c),x);window.mzBitwise=window.mzBitwise||rr;})();
