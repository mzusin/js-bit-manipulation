/* 
Bit Manipulation in JavaScript v1.0.1
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var w=Object.defineProperty;var f=Object.getOwnPropertySymbols;var F=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var S=(r,t,e)=>t in r?w(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e,o=(r,t)=>{for(var e in t||(t={}))F.call(t,e)&&S(r,e,t[e]);if(f)for(var e of f(t))l.call(t,e)&&S(r,e,t[e]);return r};var n=(r,t)=>{for(var e in t)w(r,e,{get:t[e],enumerable:!0})};var i={};n(i,{convertToUInt32:()=>h,getBinaryString:()=>I,parseBinaryString:()=>d,swap:()=>M,xor:()=>y});var I=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},d=r=>parseInt(r,2),h=r=>r>>>0,M=(r,t)=>(r^=t,t^=r,r^=t,[r,t]),y=(r,t)=>(r|t)-(r&t);var m={};n(m,{addition:()=>u,divideBy2:()=>k,divideBy2PowerN:()=>E,multiplication:()=>P,multiplyBy2:()=>A,multiplyBy2PowerN:()=>N,subtraction:()=>v,toggleSign:()=>L});var A=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},N=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<t},k=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},E=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>t},L=r=>~r+1,u=(r,t)=>{for(;t!==0;){let e=r&t;r=r^t,t=e<<1}return r},v=(r,t)=>(t=~t+1,u(r,t)),P=(r,t)=>{let e=0;for(;t!==0;)(t&1)===1&&(e=u(e,r)),t>>=1,r<<=1;return e};var b={};n(b,{getLSB:()=>_,removeLSB:()=>K,setLSB:()=>T,toggleLSB:()=>R,unsetLSB:()=>z});var _=r=>r&1,K=r=>r>>1,T=r=>r|1,z=r=>r&-2,R=r=>r^1;var p={};n(p,{getMSB:()=>C,setMSB:()=>U,unsetMSB:()=>q});var C=r=>r<0?1:0,U=r=>r|2147483648,q=r=>r&2147483647;var c={};n(c,{getRightmostSetBit:()=>J,invertBits:()=>j,isBitSetAtPosition:()=>D,setBitAtPosition:()=>H,toggleBitAtPosition:()=>W,unsetBitAtPosition:()=>O,unsetRightmostSetBitAndSetAllNextBits:()=>G});var H=(r,t)=>{let e=1<<t;return r|e},O=(r,t)=>{let e=~(1<<t);return r&e},W=(r,t)=>{let e=1<<t;return r^e},j=r=>~r,D=(r,t)=>{let e=1<<t;return(r&e)!==0},G=r=>r-1,J=r=>r&~(r-1);var x={};n(x,{isEquals:()=>X,isEven:()=>Q,isNegative:()=>Y,isOdd:()=>V,isPositive:()=>Z});var Q=r=>(r&1)===0,V=r=>(r&1)===1,X=(r,t)=>{if(!Number.isInteger(r)||!Number.isInteger(t))throw new Error("Input must be an integer.");return(r^t)===0},Y=r=>(r&2147483648)!==0,Z=r=>(r&2147483648)===0;var a={};n(a,{ALL_BITS_SET_MASK:()=>tr,CLSB_MASK:()=>er,CMSB_MASK:()=>or,LSB_MASK:()=>$,MSB_MASK:()=>rr,getNSetBitsMask:()=>nr});var $=1,rr=2147483648,tr=4294967295,er=4294967294,or=2147483647,nr=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var g={};n(g,{binaryToHex:()=>sr});var sr=r=>{let t={10:"a",11:"b",12:"c",13:"d",14:"e",15:"f"};r=r>>>0;let e="";for(;r>0;){let s=r&15;e=(s<10?s.toString():t[s])+e,r>>>=4}return e||"0"};var B={};n(B,{countSetBits:()=>ur,countUnsetBits:()=>ir});var ir=r=>{if(r===0)return 1;let t=0;for(;r>0;)r&1||t++,r>>=1;return t},ur=r=>{let t=0;for(;r>0;)t+=r&1,r>>=1;return t};var mr=o(o(o(o(o(o(o(o(o({},i),m),b),p),c),x),a),g),B);window.mzBitwise=window.mzBitwise||mr;})();
