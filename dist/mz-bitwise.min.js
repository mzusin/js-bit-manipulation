/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var w=Object.defineProperty;var B=Object.getOwnPropertySymbols;var F=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable;var S=(r,t,e)=>t in r?w(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e,n=(r,t)=>{for(var e in t||(t={}))F.call(t,e)&&S(r,e,t[e]);if(B)for(var e of B(t))f.call(t,e)&&S(r,e,t[e]);return r};var o=(r,t)=>{for(var e in t)w(r,e,{get:t[e],enumerable:!0})};var i={};o(i,{convertToUInt32:()=>d,getBinaryString:()=>l,parseBinaryString:()=>I,swap:()=>h,xor:()=>M});var l=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},I=r=>parseInt(r,2),d=r=>r>>>0,h=(r,t)=>(r^=t,t^=r,r^=t,[r,t]),M=(r,t)=>(r|t)-(r&t);var b={};o(b,{addition:()=>u,divideBy2:()=>N,divideBy2PowerN:()=>k,multiplication:()=>v,multiplyBy2:()=>y,multiplyBy2PowerN:()=>A,subtraction:()=>L,toggleSign:()=>E});var y=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},A=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<t},N=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},k=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>t},E=r=>~r+1,u=(r,t)=>{for(;t!==0;){let e=r&t;r=r^t,t=e<<1}return r},L=(r,t)=>(t=~t+1,u(r,t)),v=(r,t)=>{let e=0;for(;t!==0;)(t&1)===1&&(e=u(e,r)),t>>=1,r<<=1;return e};var m={};o(m,{getLSB:()=>P,removeLSB:()=>_,setLSB:()=>K,toggleLSB:()=>z,unsetLSB:()=>T});var P=r=>r&1,_=r=>r>>1,K=r=>r|1,T=r=>r&-2,z=r=>r^1;var p={};o(p,{getMSB:()=>R,setMSB:()=>C,unsetMSB:()=>U});var R=r=>r<0?1:0,C=r=>r|2147483648,U=r=>r&2147483647;var c={};o(c,{countSetBits:()=>D,countUnsetBits:()=>G,getRightmostSetBit:()=>Q,invertBits:()=>W,isBitSetAtPosition:()=>j,setBitAtPosition:()=>q,toggleBitAtPosition:()=>O,unsetBitAtPosition:()=>H,unsetRightmostSetBitAndSetAllNextBits:()=>J});var q=(r,t)=>{let e=1<<t;return r|e},H=(r,t)=>{let e=~(1<<t);return r&e},O=(r,t)=>{let e=1<<t;return r^e},W=r=>~r,j=(r,t)=>{let e=1<<t;return(r&e)!==0},D=r=>{let t=0;for(;r>0;)t+=r&1,r>>=1;return t},G=r=>{if(r===0)return 1;let t=0;for(;r>0;)r&1||t++,r>>=1;return t},J=r=>r-1,Q=r=>r&~(r-1);var x={};o(x,{isEquals:()=>Y,isEven:()=>V,isNegative:()=>Z,isOdd:()=>X,isPositive:()=>$});var V=r=>(r&1)===0,X=r=>(r&1)===1,Y=(r,t)=>{if(!Number.isInteger(r)||!Number.isInteger(t))throw new Error("Input must be an integer.");return(r^t)===0},Z=r=>(r&2147483648)!==0,$=r=>(r&2147483648)===0;var a={};o(a,{ALL_BITS_SET_MASK:()=>er,CLSB_MASK:()=>nr,CMSB_MASK:()=>or,LSB_MASK:()=>rr,MSB_MASK:()=>tr,getNSetBitsMask:()=>sr});var rr=1,tr=2147483648,er=4294967295,nr=4294967294,or=2147483647,sr=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var g={};o(g,{binaryToHex:()=>ir});var ir=r=>{let t={10:"a",11:"b",12:"c",13:"d",14:"e",15:"f"};r=r>>>0;let e="";for(;r>0;){let s=r&15;e=(s<10?s.toString():t[s])+e,r>>>=4}return e||"0"};var ur=n(n(n(n(n(n(n(n({},i),b),m),p),c),x),a),g);window.mzBitwise=window.mzBitwise||ur;})();
