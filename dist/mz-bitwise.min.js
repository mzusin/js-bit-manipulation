/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var g=Object.defineProperty;var x=Object.getOwnPropertySymbols;var w=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var a=(r,e,t)=>e in r?g(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))w.call(e,t)&&a(r,t,e[t]);if(x)for(var t of x(e))l.call(e,t)&&a(r,t,e[t]);return r};var o=(r,e)=>{for(var t in e)g(r,t,{get:e[t],enumerable:!0})};var s={};o(s,{convertToUInt32:()=>I,getBinaryString:()=>B,parseBinaryString:()=>f,swap:()=>S,xor:()=>d});var B=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},f=r=>parseInt(r,2),I=r=>r>>>0,S=(r,e)=>(r^=e,e^=r,r^=e,[r,e]),d=(r,e)=>(r|e)-(r&e);var u={};o(u,{addition:()=>i,divideBy2:()=>N,divideBy2PowerN:()=>k,multiplication:()=>M,multiplyBy2:()=>h,multiplyBy2PowerN:()=>y,subtraction:()=>F,toggleSign:()=>E});var h=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},y=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},N=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},k=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},E=r=>~r+1,i=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},F=(r,e)=>(e=~e+1,i(r,e)),M=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=i(t,r)),e>>=1,r<<=1;return t};var b={};o(b,{getLSB:()=>v,removeLSB:()=>P,setLSB:()=>L,toggleLSB:()=>z,unsetLSB:()=>A});var v=r=>r&1,P=r=>r>>1,L=r=>r|1,A=r=>r&-2,z=r=>r^1;var m={};o(m,{getMSB:()=>U,setMSB:()=>q,unsetMSB:()=>O});var U=r=>r<0?1:0,q=r=>r|2147483648,O=r=>r&2147483647;var p={};o(p,{countSetBits:()=>G,countUnsetBits:()=>H,invertBits:()=>C,isBitSetAtPosition:()=>D,setBitAtPosition:()=>T,toggleBitAtPosition:()=>j,unsetBitAtPosition:()=>W});var T=(r,e)=>{let t=1<<e;return r|t},W=(r,e)=>{let t=~(1<<e);return r&t},j=(r,e)=>{let t=1<<e;return r^t},C=r=>~r,D=(r,e)=>{let t=1<<e;return(r&t)!==0},G=r=>{let e=0;for(;r>0;)e+=r&1,r>>=1;return e},H=r=>{if(r===0)return 1;let e=0;for(;r>0;)r&1||e++,r>>=1;return e};var c={};o(c,{isEquals:()=>Q,isEven:()=>J,isOdd:()=>K});var J=r=>(r&1)===0,K=r=>(r&1)===1,Q=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};var R=n(n(n(n(n(n({},s),u),b),m),p),c);window.mzBitwise=window.mzBitwise||R;})();
