/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var p=Object.defineProperty;var m=Object.getOwnPropertySymbols;var w=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var b=(r,e,t)=>e in r?p(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))w.call(e,t)&&b(r,t,e[t]);if(m)for(var t of m(e))a.call(e,t)&&b(r,t,e[t]);return r};var o=(r,e)=>{for(var t in e)p(r,t,{get:e[t],enumerable:!0})};var i={};o(i,{divideBy2:()=>f,equals:()=>l,getBinaryString:()=>g,isEven:()=>c,isOdd:()=>x,multiplyBy2:()=>B});var g=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},c=r=>(r&1)===0,x=r=>(r&1)===1,f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},B=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},l=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};var u={};o(u,{getLSB:()=>I,removeLSB:()=>d,setLSB:()=>S,unsetLSB:()=>y});var I=r=>r&1,d=r=>r>>1,S=r=>r|1,y=r=>r&-2;var s={};o(s,{getMSB:()=>E});var E=r=>r<0?1:0;var N=n(n(n({},i),u),s);window.mzBitwise=window.mzBitwise||N;})();
