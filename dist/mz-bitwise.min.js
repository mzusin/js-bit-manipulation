/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var x=Object.defineProperty;var a=Object.getOwnPropertySymbols;var g=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var c=(r,e,t)=>e in r?x(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))g.call(e,t)&&c(r,t,e[t]);if(a)for(var t of a(e))w.call(e,t)&&c(r,t,e[t]);return r};var o=(r,e)=>{for(var t in e)x(r,t,{get:e[t],enumerable:!0})};var s={};o(s,{convertToUInt32:()=>I,getBinaryString:()=>f,parseBinaryString:()=>B});var f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},B=r=>parseInt(r,2),I=r=>r>>>0;var m={};o(m,{divideBy2:()=>S,divideBy2PowerN:()=>y,multiplyBy2:()=>l,multiplyBy2PowerN:()=>d,toggleSign:()=>N});var l=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},d=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},S=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},y=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},N=r=>~r+1;var u={};o(u,{getLSB:()=>E,removeLSB:()=>h,setLSB:()=>F,unsetLSB:()=>M});var E=r=>r&1,h=r=>r>>1,F=r=>r|1,M=r=>r&-2;var i={};o(i,{getMSB:()=>k,setMSB:()=>v,unsetMSB:()=>L});var k=r=>r<0?1:0,v=r=>r|2147483648,L=r=>r&2147483647;var b={};o(b,{setBitAtPosition:()=>P,unsetBitAtPosition:()=>z});var P=(r,e)=>{let t=1<<e;return r|t},z=(r,e)=>{let t=~(1<<e);return r&t};var p={};o(p,{isEquals:()=>O,isEven:()=>A,isOdd:()=>q});var A=r=>(r&1)===0,q=r=>(r&1)===1,O=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};var T=n(n(n(n(n(n({},s),m),u),i),b),p);window.mzBitwise=window.mzBitwise||T;})();
