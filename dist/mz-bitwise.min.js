/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var c=Object.defineProperty;var p=Object.getOwnPropertySymbols;var x=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable;var a=(r,e,t)=>e in r?c(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))x.call(e,t)&&a(r,t,e[t]);if(p)for(var t of p(e))g.call(e,t)&&a(r,t,e[t]);return r};var o=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})};var m={};o(m,{convertToUInt32:()=>f,getBinaryString:()=>w});var w=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},f=r=>r>>>0;var s={};o(s,{divideBy2:()=>B,divideBy2PowerN:()=>I,multiplyBy2:()=>l,multiplyBy2PowerN:()=>d,toggleSign:()=>S});var B=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},I=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},l=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},d=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},S=r=>~r+1;var u={};o(u,{getLSB:()=>N,removeLSB:()=>y,setLSB:()=>E,unsetLSB:()=>h});var N=r=>r&1,y=r=>r>>1,E=r=>r|1,h=r=>r&-2;var i={};o(i,{getMSB:()=>F,setMSB:()=>M,unsetMSB:()=>v});var F=r=>r<0?1:0,M=r=>r|2147483648,v=r=>r&2147483647;var b={};o(b,{isEquals:()=>z,isEven:()=>k,isOdd:()=>L});var k=r=>(r&1)===0,L=r=>(r&1)===1,z=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};var P=n(n(n(n(n({},m),s),u),i),b);window.mzBitwise=window.mzBitwise||P;})();
