/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var m=Object.defineProperty;var u=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var s=(r,e,t)=>e in r?m(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))p.call(e,t)&&s(r,t,e[t]);if(u)for(var t of u(e))w.call(e,t)&&s(r,t,e[t]);return r};var b=(r,e)=>{for(var t in e)m(r,t,{get:e[t],enumerable:!0})};var o={};b(o,{divideBy2:()=>x,equals:()=>f,getBinaryString:()=>a,isEven:()=>c,isOdd:()=>g,multiplyBy2:()=>B});var a=r=>(r>>>0).toString(2),c=r=>(r&1)===0,g=r=>(r&1)===1,x=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},B=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},f=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};var i={};b(i,{getLSB:()=>l,removeLSB:()=>d,setLSB:()=>I,unsetLSB:()=>S});var l=r=>r&1,d=r=>r>>1,I=r=>r|1,S=r=>r&-2;var y=n(n({},o),i);window.mzBitwise=window.mzBitwise||y;})();
