/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var u=Object.defineProperty;var o=Object.getOwnPropertySymbols;var b=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable;var i=(e,r,t)=>r in e?u(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,s=(e,r)=>{for(var t in r||(r={}))b.call(r,t)&&i(e,t,r[t]);if(o)for(var t of o(r))m.call(r,t)&&i(e,t,r[t]);return e};var p=(e,r)=>{for(var t in r)u(e,t,{get:r[t],enumerable:!0})};var n={};p(n,{divideBy2:()=>c,equals:()=>d,getLSB:()=>l,isEven:()=>w,isOdd:()=>a,multiplyBy2:()=>g,removeLSB:()=>x});var w=e=>(e&1)===0,a=e=>(e&1)===1,c=e=>{if(!Number.isInteger(e))throw new Error("Input must be an integer.");return e>>1},g=e=>{if(!Number.isInteger(e))throw new Error("Input must be an integer.");return e<<1},d=(e,r)=>{if(!Number.isInteger(e)||!Number.isInteger(r))throw new Error("Input must be an integer.");return(e^r)===0},l=e=>e&1,x=e=>e>>1;var f=s({},n);window.mzBitwise=window.mzBitwise||f;})();
