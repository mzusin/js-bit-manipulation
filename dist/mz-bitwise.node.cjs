/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var i=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},p=(r,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of b(e))!m.call(r,n)&&n!==t&&o(r,n,{get:()=>e[n],enumerable:!(s=u(e,n))||s.enumerable});return r};var c=r=>p(o({},"__esModule",{value:!0}),r);var U={};i(U,{addition:()=>l,convertToUInt32:()=>a,divideBy2:()=>I,divideBy2PowerN:()=>f,getBinaryString:()=>x,getLSB:()=>y,getMSB:()=>E,invertBits:()=>A,isBitSetAtPosition:()=>L,isEquals:()=>T,isEven:()=>q,isOdd:()=>O,multiplyBy2:()=>B,multiplyBy2PowerN:()=>w,parseBinaryString:()=>g,removeLSB:()=>N,setBitAtPosition:()=>M,setLSB:()=>d,setMSB:()=>h,toggleBitAtPosition:()=>P,toggleSign:()=>S,unsetBitAtPosition:()=>v,unsetLSB:()=>k,unsetMSB:()=>F});module.exports=c(U);var x=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},g=r=>parseInt(r,2),a=r=>r>>>0;var B=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},w=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},I=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},f=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},S=r=>~r+1,l=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r};var y=r=>r&1,N=r=>r>>1,d=r=>r|1,k=r=>r&-2;var E=r=>r<0?1:0,h=r=>r|2147483648,F=r=>r&2147483647;var M=(r,e)=>{let t=1<<e;return r|t},v=(r,e)=>{let t=~(1<<e);return r&t},P=(r,e)=>{let t=1<<e;return r^t},A=r=>~r,L=(r,e)=>{let t=1<<e;return(r&t)!==0};var q=r=>(r&1)===0,O=r=>(r&1)===1,T=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};0&&(module.exports={addition,convertToUInt32,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,invertBits,isBitSetAtPosition,isEquals,isEven,isOdd,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,toggleBitAtPosition,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB});
