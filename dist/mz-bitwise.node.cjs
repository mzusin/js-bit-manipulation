/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var p=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,u)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of i(e))!m.call(r,n)&&n!==t&&o(r,n,{get:()=>e[n],enumerable:!(u=b(e,n))||u.enumerable});return r};var x=r=>c(o({},"__esModule",{value:!0}),r);var C={};p(C,{addition:()=>s,convertToUInt32:()=>B,divideBy2:()=>f,divideBy2PowerN:()=>S,getBinaryString:()=>a,getLSB:()=>h,getMSB:()=>M,invertBits:()=>O,isBitSetAtPosition:()=>T,isEquals:()=>z,isEven:()=>U,isOdd:()=>j,multiplication:()=>d,multiplyBy2:()=>l,multiplyBy2PowerN:()=>I,parseBinaryString:()=>g,removeLSB:()=>k,setBitAtPosition:()=>A,setLSB:()=>E,setMSB:()=>v,subtraction:()=>N,swap:()=>w,toggleBitAtPosition:()=>q,toggleSign:()=>y,unsetBitAtPosition:()=>L,unsetLSB:()=>F,unsetMSB:()=>P});module.exports=x(C);var a=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},g=r=>parseInt(r,2),B=r=>r>>>0,w=(r,e)=>(r^=e,e^=r,r^=e,[r,e]);var l=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},I=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},S=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},y=r=>~r+1,s=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},N=(r,e)=>(e=~e+1,s(r,e)),d=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=s(t,r)),e>>=1,r<<=1;return t};var h=r=>r&1,k=r=>r>>1,E=r=>r|1,F=r=>r&-2;var M=r=>r<0?1:0,v=r=>r|2147483648,P=r=>r&2147483647;var A=(r,e)=>{let t=1<<e;return r|t},L=(r,e)=>{let t=~(1<<e);return r&t},q=(r,e)=>{let t=1<<e;return r^t},O=r=>~r,T=(r,e)=>{let t=1<<e;return(r&t)!==0};var U=r=>(r&1)===0,j=r=>(r&1)===1,z=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};0&&(module.exports={addition,convertToUInt32,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,invertBits,isBitSetAtPosition,isEquals,isEven,isOdd,multiplication,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,swap,toggleBitAtPosition,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB});
