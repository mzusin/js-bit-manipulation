/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var p=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of i(e))!m.call(r,n)&&n!==t&&o(r,n,{get:()=>e[n],enumerable:!(s=b(e,n))||s.enumerable});return r};var x=r=>c(o({},"__esModule",{value:!0}),r);var j={};p(j,{addition:()=>u,convertToUInt32:()=>B,divideBy2:()=>f,divideBy2PowerN:()=>S,getBinaryString:()=>g,getLSB:()=>N,getMSB:()=>h,invertBits:()=>L,isBitSetAtPosition:()=>q,isEquals:()=>U,isEven:()=>O,isOdd:()=>T,multiplyBy2:()=>w,multiplyBy2PowerN:()=>I,parseBinaryString:()=>a,removeLSB:()=>d,setBitAtPosition:()=>v,setLSB:()=>k,setMSB:()=>F,subtraction:()=>y,toggleBitAtPosition:()=>A,toggleSign:()=>l,unsetBitAtPosition:()=>P,unsetLSB:()=>E,unsetMSB:()=>M});module.exports=x(j);var g=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},a=r=>parseInt(r,2),B=r=>r>>>0;var w=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},I=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},S=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},l=r=>~r+1,u=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},y=(r,e)=>(e=~e+1,u(r,e));var N=r=>r&1,d=r=>r>>1,k=r=>r|1,E=r=>r&-2;var h=r=>r<0?1:0,F=r=>r|2147483648,M=r=>r&2147483647;var v=(r,e)=>{let t=1<<e;return r|t},P=(r,e)=>{let t=~(1<<e);return r&t},A=(r,e)=>{let t=1<<e;return r^t},L=r=>~r,q=(r,e)=>{let t=1<<e;return(r&t)!==0};var O=r=>(r&1)===0,T=r=>(r&1)===1,U=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};0&&(module.exports={addition,convertToUInt32,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,invertBits,isBitSetAtPosition,isEquals,isEven,isOdd,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,toggleBitAtPosition,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB});
