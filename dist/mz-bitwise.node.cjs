/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var x=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,u)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of i(e))!p.call(r,n)&&n!==t&&o(r,n,{get:()=>e[n],enumerable:!(u=b(e,n))||u.enumerable});return r};var m=r=>c(o({},"__esModule",{value:!0}),r);var Q={};x(Q,{ALL_BITS_SET_MASK:()=>tr,CLSB_MASK:()=>nr,CMSB_MASK:()=>or,LSB_MASK:()=>rr,MSB_MASK:()=>er,addition:()=>s,convertToUInt32:()=>a,countSetBits:()=>q,countUnsetBits:()=>O,divideBy2:()=>f,divideBy2PowerN:()=>I,getBinaryString:()=>g,getLSB:()=>N,getMSB:()=>d,getNSetBitsMask:()=>J,invertBits:()=>C,isBitSetAtPosition:()=>U,isEquals:()=>D,isEven:()=>j,isNegative:()=>G,isOdd:()=>z,isPositive:()=>H,multiplication:()=>E,multiplyBy2:()=>w,multiplyBy2PowerN:()=>l,parseBinaryString:()=>F,removeLSB:()=>A,setBitAtPosition:()=>_,setLSB:()=>k,setMSB:()=>v,subtraction:()=>h,swap:()=>B,toggleBitAtPosition:()=>T,toggleLSB:()=>L,toggleSign:()=>M,unsetBitAtPosition:()=>K,unsetLSB:()=>y,unsetMSB:()=>P,xor:()=>S});module.exports=m(Q);var g=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},F=r=>parseInt(r,2),a=r=>r>>>0,B=(r,e)=>(r^=e,e^=r,r^=e,[r,e]),S=(r,e)=>(r|e)-(r&e);var w=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},l=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},I=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},M=r=>~r+1,s=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},h=(r,e)=>(e=~e+1,s(r,e)),E=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=s(t,r)),e>>=1,r<<=1;return t};var N=r=>r&1,A=r=>r>>1,k=r=>r|1,y=r=>r&-2,L=r=>r^1;var d=r=>r<0?1:0,v=r=>r|2147483648,P=r=>r&2147483647;var _=(r,e)=>{let t=1<<e;return r|t},K=(r,e)=>{let t=~(1<<e);return r&t},T=(r,e)=>{let t=1<<e;return r^t},C=r=>~r,U=(r,e)=>{let t=1<<e;return(r&t)!==0},q=r=>{let e=0;for(;r>0;)e+=r&1,r>>=1;return e},O=r=>{if(r===0)return 1;let e=0;for(;r>0;)r&1||e++,r>>=1;return e};var j=r=>(r&1)===0,z=r=>(r&1)===1,D=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0},G=r=>(r&2147483648)!==0,H=r=>(r&2147483648)===0;var rr=1,er=2147483648,tr=4294967295,nr=4294967294,or=2147483647,J=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};0&&(module.exports={ALL_BITS_SET_MASK,CLSB_MASK,CMSB_MASK,LSB_MASK,MSB_MASK,addition,convertToUInt32,countSetBits,countUnsetBits,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,getNSetBitsMask,invertBits,isBitSetAtPosition,isEquals,isEven,isNegative,isOdd,isPositive,multiplication,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,swap,toggleBitAtPosition,toggleLSB,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB,xor});
