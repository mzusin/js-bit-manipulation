/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var s=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var x=(r,e)=>{for(var t in e)s(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of i(e))!p.call(r,o)&&o!==t&&s(r,o,{get:()=>e[o],enumerable:!(n=b(e,o))||n.enumerable});return r};var m=r=>c(s({},"__esModule",{value:!0}),r);var Q={};x(Q,{ALL_BITS_SET_MASK:()=>nr,CLSB_MASK:()=>or,CMSB_MASK:()=>sr,LSB_MASK:()=>er,MSB_MASK:()=>tr,addition:()=>u,binaryToHex:()=>J,convertToUInt32:()=>F,countSetBits:()=>q,countUnsetBits:()=>H,divideBy2:()=>f,divideBy2PowerN:()=>I,getBinaryString:()=>a,getLSB:()=>N,getMSB:()=>L,getNSetBitsMask:()=>G,invertBits:()=>C,isBitSetAtPosition:()=>U,isEquals:()=>j,isEven:()=>O,isNegative:()=>z,isOdd:()=>R,isPositive:()=>D,multiplication:()=>E,multiplyBy2:()=>l,multiplyBy2PowerN:()=>w,parseBinaryString:()=>g,removeLSB:()=>d,setBitAtPosition:()=>_,setLSB:()=>k,setMSB:()=>v,subtraction:()=>h,swap:()=>B,toggleBitAtPosition:()=>T,toggleLSB:()=>A,toggleSign:()=>M,unsetBitAtPosition:()=>K,unsetLSB:()=>y,unsetMSB:()=>P,xor:()=>S});module.exports=m(Q);var a=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},g=r=>parseInt(r,2),F=r=>r>>>0,B=(r,e)=>(r^=e,e^=r,r^=e,[r,e]),S=(r,e)=>(r|e)-(r&e);var l=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},w=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},I=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},M=r=>~r+1,u=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},h=(r,e)=>(e=~e+1,u(r,e)),E=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=u(t,r)),e>>=1,r<<=1;return t};var N=r=>r&1,d=r=>r>>1,k=r=>r|1,y=r=>r&-2,A=r=>r^1;var L=r=>r<0?1:0,v=r=>r|2147483648,P=r=>r&2147483647;var _=(r,e)=>{let t=1<<e;return r|t},K=(r,e)=>{let t=~(1<<e);return r&t},T=(r,e)=>{let t=1<<e;return r^t},C=r=>~r,U=(r,e)=>{let t=1<<e;return(r&t)!==0},q=r=>{let e=0;for(;r>0;)e+=r&1,r>>=1;return e},H=r=>{if(r===0)return 1;let e=0;for(;r>0;)r&1||e++,r>>=1;return e};var O=r=>(r&1)===0,R=r=>(r&1)===1,j=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0},z=r=>(r&2147483648)!==0,D=r=>(r&2147483648)===0;var er=1,tr=2147483648,nr=4294967295,or=4294967294,sr=2147483647,G=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var J=r=>{let e={10:"a",11:"b",12:"c",13:"d",14:"e",15:"f"};r=r>>>0;let t="";for(;r>0;){let n=r&15;t=(n<10?n.toString():e[n])+t,r>>>=4}return t||"0"};0&&(module.exports={ALL_BITS_SET_MASK,CLSB_MASK,CMSB_MASK,LSB_MASK,MSB_MASK,addition,binaryToHex,convertToUInt32,countSetBits,countUnsetBits,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,getNSetBitsMask,invertBits,isBitSetAtPosition,isEquals,isEven,isNegative,isOdd,isPositive,multiplication,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,swap,toggleBitAtPosition,toggleLSB,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB,xor});
