/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var c=(r,t)=>{for(var e in t)o(r,e,{get:t[e],enumerable:!0})},m=(r,t,e,u)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of i(t))!p.call(r,n)&&n!==e&&o(r,n,{get:()=>t[n],enumerable:!(u=b(t,n))||u.enumerable});return r};var x=r=>m(o({},"__esModule",{value:!0}),r);var H={};c(H,{ALL_BITS_SET_MASK:()=>rr,CLSB_MASK:()=>tr,CMSB_MASK:()=>er,LSB_MASK:()=>Z,MSB_MASK:()=>$,addition:()=>s,convertToUInt32:()=>a,countSetBits:()=>q,countUnsetBits:()=>O,divideBy2:()=>f,divideBy2PowerN:()=>I,getBinaryString:()=>F,getLSB:()=>A,getMSB:()=>d,getNSetBitsMask:()=>G,invertBits:()=>C,isBitSetAtPosition:()=>U,isEquals:()=>D,isEven:()=>j,isOdd:()=>z,multiplication:()=>E,multiplyBy2:()=>w,multiplyBy2PowerN:()=>l,parseBinaryString:()=>g,removeLSB:()=>N,setBitAtPosition:()=>P,setLSB:()=>k,setMSB:()=>_,subtraction:()=>h,swap:()=>B,toggleBitAtPosition:()=>T,toggleLSB:()=>L,toggleSign:()=>M,unsetBitAtPosition:()=>K,unsetLSB:()=>y,unsetMSB:()=>v,xor:()=>S});module.exports=x(H);var F=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},g=r=>parseInt(r,2),a=r=>r>>>0,B=(r,t)=>(r^=t,t^=r,r^=t,[r,t]),S=(r,t)=>(r|t)-(r&t);var w=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},l=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<t},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},I=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>t},M=r=>~r+1,s=(r,t)=>{for(;t!==0;){let e=r&t;r=r^t,t=e<<1}return r},h=(r,t)=>(t=~t+1,s(r,t)),E=(r,t)=>{let e=0;for(;t!==0;)(t&1)===1&&(e=s(e,r)),t>>=1,r<<=1;return e};var A=r=>r&1,N=r=>r>>1,k=r=>r|1,y=r=>r&-2,L=r=>r^1;var d=r=>r<0?1:0,_=r=>r|2147483648,v=r=>r&2147483647;var P=(r,t)=>{let e=1<<t;return r|e},K=(r,t)=>{let e=~(1<<t);return r&e},T=(r,t)=>{let e=1<<t;return r^e},C=r=>~r,U=(r,t)=>{let e=1<<t;return(r&e)!==0},q=r=>{let t=0;for(;r>0;)t+=r&1,r>>=1;return t},O=r=>{if(r===0)return 1;let t=0;for(;r>0;)r&1||t++,r>>=1;return t};var j=r=>(r&1)===0,z=r=>(r&1)===1,D=(r,t)=>{if(!Number.isInteger(r)||!Number.isInteger(t))throw new Error("Input must be an integer.");return(r^t)===0};var Z=1,$=2147483648,rr=4294967295,tr=4294967294,er=2147483647,G=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};0&&(module.exports={ALL_BITS_SET_MASK,CLSB_MASK,CMSB_MASK,LSB_MASK,MSB_MASK,addition,convertToUInt32,countSetBits,countUnsetBits,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,getNSetBitsMask,invertBits,isBitSetAtPosition,isEquals,isEven,isOdd,multiplication,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,swap,toggleBitAtPosition,toggleLSB,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB,xor});
