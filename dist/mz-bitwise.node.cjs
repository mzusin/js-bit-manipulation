/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var p=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,u)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of i(e))!m.call(r,n)&&n!==t&&o(r,n,{get:()=>e[n],enumerable:!(u=b(e,n))||u.enumerable});return r};var x=r=>c(o({},"__esModule",{value:!0}),r);var D={};p(D,{addition:()=>s,convertToUInt32:()=>B,divideBy2:()=>S,divideBy2PowerN:()=>y,getBinaryString:()=>a,getLSB:()=>k,getMSB:()=>v,invertBits:()=>T,isBitSetAtPosition:()=>U,isEquals:()=>C,isEven:()=>j,isOdd:()=>z,multiplication:()=>h,multiplyBy2:()=>I,multiplyBy2PowerN:()=>f,parseBinaryString:()=>g,removeLSB:()=>E,setBitAtPosition:()=>L,setLSB:()=>F,setMSB:()=>P,subtraction:()=>d,swap:()=>w,toggleBitAtPosition:()=>O,toggleSign:()=>N,unsetBitAtPosition:()=>q,unsetLSB:()=>M,unsetMSB:()=>A,xor:()=>l});module.exports=x(D);var a=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},g=r=>parseInt(r,2),B=r=>r>>>0,w=(r,e)=>(r^=e,e^=r,r^=e,[r,e]),l=(r,e)=>(r|e)-(r&e);var I=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},f=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},S=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},y=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},N=r=>~r+1,s=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},d=(r,e)=>(e=~e+1,s(r,e)),h=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=s(t,r)),e>>=1,r<<=1;return t};var k=r=>r&1,E=r=>r>>1,F=r=>r|1,M=r=>r&-2;var v=r=>r<0?1:0,P=r=>r|2147483648,A=r=>r&2147483647;var L=(r,e)=>{let t=1<<e;return r|t},q=(r,e)=>{let t=~(1<<e);return r&t},O=(r,e)=>{let t=1<<e;return r^t},T=r=>~r,U=(r,e)=>{let t=1<<e;return(r&t)!==0};var j=r=>(r&1)===0,z=r=>(r&1)===1,C=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};0&&(module.exports={addition,convertToUInt32,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,invertBits,isBitSetAtPosition,isEquals,isEven,isOdd,multiplication,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,swap,toggleBitAtPosition,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB,xor});
