/* 
Bit Manipulation in JavaScript v1.0.1
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var s=Object.defineProperty;var i=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var x=(r,t)=>{for(var e in t)s(r,e,{get:t[e],enumerable:!0})},c=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of b(t))!p.call(r,o)&&o!==e&&s(r,o,{get:()=>t[o],enumerable:!(n=i(t,o))||n.enumerable});return r};var m=r=>c(s({},"__esModule",{value:!0}),r);var W={};x(W,{ALL_BITS_SET_MASK:()=>sr,CLSB_MASK:()=>ur,CMSB_MASK:()=>ir,LSB_MASK:()=>nr,MSB_MASK:()=>or,addition:()=>u,binaryToHex:()=>J,convertToUInt32:()=>B,countSetBits:()=>V,countUnsetBits:()=>Q,divideBy2:()=>f,divideBy2PowerN:()=>I,getBinaryString:()=>g,getLSB:()=>N,getMSB:()=>L,getNSetBitsMask:()=>G,getRightmostSetBit:()=>q,invertBits:()=>R,isBitSetAtPosition:()=>C,isEquals:()=>j,isEven:()=>H,isNegative:()=>z,isOdd:()=>O,isPositive:()=>D,multiplication:()=>A,multiplyBy2:()=>l,multiplyBy2PowerN:()=>w,parseBinaryString:()=>a,removeLSB:()=>d,setBitAtPosition:()=>_,setLSB:()=>E,setMSB:()=>v,subtraction:()=>M,swap:()=>F,toggleBitAtPosition:()=>T,toggleLSB:()=>y,toggleSign:()=>h,unsetBitAtPosition:()=>K,unsetLSB:()=>k,unsetMSB:()=>P,unsetRightmostSetBitAndSetAllNextBits:()=>U,xor:()=>S});module.exports=m(W);var g=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},a=r=>parseInt(r,2),B=r=>r>>>0,F=(r,t)=>(r^=t,t^=r,r^=t,[r,t]),S=(r,t)=>(r|t)-(r&t);var l=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},w=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<t},f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},I=(r,t)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>t},h=r=>~r+1,u=(r,t)=>{for(;t!==0;){let e=r&t;r=r^t,t=e<<1}return r},M=(r,t)=>(t=~t+1,u(r,t)),A=(r,t)=>{let e=0;for(;t!==0;)(t&1)===1&&(e=u(e,r)),t>>=1,r<<=1;return e};var N=r=>r&1,d=r=>r>>1,E=r=>r|1,k=r=>r&-2,y=r=>r^1;var L=r=>r<0?1:0,v=r=>r|2147483648,P=r=>r&2147483647;var _=(r,t)=>{let e=1<<t;return r|e},K=(r,t)=>{let e=~(1<<t);return r&e},T=(r,t)=>{let e=1<<t;return r^e},R=r=>~r,C=(r,t)=>{let e=1<<t;return(r&e)!==0},U=r=>r-1,q=r=>r&~(r-1);var H=r=>(r&1)===0,O=r=>(r&1)===1,j=(r,t)=>{if(!Number.isInteger(r)||!Number.isInteger(t))throw new Error("Input must be an integer.");return(r^t)===0},z=r=>(r&2147483648)!==0,D=r=>(r&2147483648)===0;var nr=1,or=2147483648,sr=4294967295,ur=4294967294,ir=2147483647,G=r=>{if(r<=0)throw new Error("Input must be > 0.");return(1<<r)-1};var J=r=>{let t={10:"a",11:"b",12:"c",13:"d",14:"e",15:"f"};r=r>>>0;let e="";for(;r>0;){let n=r&15;e=(n<10?n.toString():t[n])+e,r>>>=4}return e||"0"};var Q=r=>{if(r===0)return 1;let t=0;for(;r>0;)r&1||t++,r>>=1;return t},V=r=>{let t=0;for(;r>0;)t+=r&1,r>>=1;return t};0&&(module.exports={ALL_BITS_SET_MASK,CLSB_MASK,CMSB_MASK,LSB_MASK,MSB_MASK,addition,binaryToHex,convertToUInt32,countSetBits,countUnsetBits,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,getNSetBitsMask,getRightmostSetBit,invertBits,isBitSetAtPosition,isEquals,isEven,isNegative,isOdd,isPositive,multiplication,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,swap,toggleBitAtPosition,toggleLSB,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB,unsetRightmostSetBitAndSetAllNextBits,xor});
