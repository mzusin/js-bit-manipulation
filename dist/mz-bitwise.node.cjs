/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var m=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,u)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of i(e))!p.call(r,n)&&n!==t&&o(r,n,{get:()=>e[n],enumerable:!(u=b(e,n))||u.enumerable});return r};var x=r=>c(o({},"__esModule",{value:!0}),r);var J={};m(J,{addition:()=>s,convertToUInt32:()=>B,countSetBits:()=>z,countUnsetBits:()=>C,divideBy2:()=>S,divideBy2PowerN:()=>h,getBinaryString:()=>g,getLSB:()=>k,getMSB:()=>P,invertBits:()=>T,isBitSetAtPosition:()=>j,isEquals:()=>H,isEven:()=>D,isOdd:()=>G,multiplication:()=>d,multiplyBy2:()=>f,multiplyBy2PowerN:()=>I,parseBinaryString:()=>a,removeLSB:()=>E,setBitAtPosition:()=>U,setLSB:()=>F,setMSB:()=>L,subtraction:()=>N,swap:()=>l,toggleBitAtPosition:()=>O,toggleLSB:()=>v,toggleSign:()=>y,unsetBitAtPosition:()=>q,unsetLSB:()=>M,unsetMSB:()=>A,xor:()=>w});module.exports=x(J);var g=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},a=r=>parseInt(r,2),B=r=>r>>>0,l=(r,e)=>(r^=e,e^=r,r^=e,[r,e]),w=(r,e)=>(r|e)-(r&e);var f=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},I=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},S=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},h=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},y=r=>~r+1,s=(r,e)=>{for(;e!==0;){let t=r&e;r=r^e,e=t<<1}return r},N=(r,e)=>(e=~e+1,s(r,e)),d=(r,e)=>{let t=0;for(;e!==0;)(e&1)===1&&(t=s(t,r)),e>>=1,r<<=1;return t};var k=r=>r&1,E=r=>r>>1,F=r=>r|1,M=r=>r&-2,v=r=>r^1;var P=r=>r<0?1:0,L=r=>r|2147483648,A=r=>r&2147483647;var U=(r,e)=>{let t=1<<e;return r|t},q=(r,e)=>{let t=~(1<<e);return r&t},O=(r,e)=>{let t=1<<e;return r^t},T=r=>~r,j=(r,e)=>{let t=1<<e;return(r&t)!==0},z=r=>{let e=0;for(;r>0;)e+=r&1,r>>=1;return e},C=r=>{if(r===0)return 1;let e=0;for(;r>0;)r&1||e++,r>>=1;return e};var D=r=>(r&1)===0,G=r=>(r&1)===1,H=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};0&&(module.exports={addition,convertToUInt32,countSetBits,countUnsetBits,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,invertBits,isBitSetAtPosition,isEquals,isEven,isOdd,multiplication,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,subtraction,swap,toggleBitAtPosition,toggleLSB,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB,xor});
