/* 
Bit Manipulation in JavaScript v1.0.0
A collection of bit manipulation helpers written TypeScript.
https://github.com/mzusin/js-bit-manipulation
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var o=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var i=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},p=(r,e,t,u)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of m(e))!b.call(r,n)&&n!==t&&o(r,n,{get:()=>e[n],enumerable:!(u=s(e,n))||u.enumerable});return r};var x=r=>p(o({},"__esModule",{value:!0}),r);var T={};i(T,{convertToUInt32:()=>a,divideBy2:()=>w,divideBy2PowerN:()=>f,getBinaryString:()=>c,getLSB:()=>l,getMSB:()=>E,invertBits:()=>P,isBitSetAtPosition:()=>A,isEquals:()=>O,isEven:()=>L,isOdd:()=>q,multiplyBy2:()=>B,multiplyBy2PowerN:()=>I,parseBinaryString:()=>g,removeLSB:()=>N,setBitAtPosition:()=>d,setLSB:()=>k,setMSB:()=>F,toggleBitAtPosition:()=>v,toggleSign:()=>S,unsetBitAtPosition:()=>h,unsetLSB:()=>y,unsetMSB:()=>M});module.exports=x(T);var c=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return(r>>>0).toString(2)},g=r=>parseInt(r,2),a=r=>r>>>0;var B=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<1},I=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r<<e},w=r=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>1},f=(r,e)=>{if(!Number.isInteger(r))throw new Error("Input must be an integer.");return r>>e},S=r=>~r+1;var l=r=>r&1,N=r=>r>>1,k=r=>r|1,y=r=>r&-2;var E=r=>r<0?1:0,F=r=>r|2147483648,M=r=>r&2147483647;var d=(r,e)=>{let t=1<<e;return r|t},h=(r,e)=>{let t=~(1<<e);return r&t},v=(r,e)=>{let t=1<<e;return r^t},P=r=>~r,A=(r,e)=>{let t=1<<e;return(r&t)!==0};var L=r=>(r&1)===0,q=r=>(r&1)===1,O=(r,e)=>{if(!Number.isInteger(r)||!Number.isInteger(e))throw new Error("Input must be an integer.");return(r^e)===0};0&&(module.exports={convertToUInt32,divideBy2,divideBy2PowerN,getBinaryString,getLSB,getMSB,invertBits,isBitSetAtPosition,isEquals,isEven,isOdd,multiplyBy2,multiplyBy2PowerN,parseBinaryString,removeLSB,setBitAtPosition,setLSB,setMSB,toggleBitAtPosition,toggleSign,unsetBitAtPosition,unsetLSB,unsetMSB});
